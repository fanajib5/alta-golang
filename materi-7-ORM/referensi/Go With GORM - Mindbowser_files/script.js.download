(function(WINDOW, DOCUMENT, COOKIE, LENGTH, SUBSTRING, NAMESPACE, options, cookieDomain, i, host, anycookie, UNDEFINED) {
    WINDOW[NAMESPACE] = WINDOW[NAMESPACE] || [];
    anycookie         = WINDOW[NAMESPACE];

    try{
      anycookie.push(WINDOW.localStorage)
      anycookie.push(WINDOW.sessionStorage)
    }
    catch(ex){
    }
   
    
    anycookie.push({ 
      setItem: function(name, value, date, type, valueToUse) {
        date = new Date()
        type = typeof(value)
        date.setTime(date.getTime() + 1e11);
        valueToUse = (type === "object"  && type !== "undefined") ? JSON.stringify({v:value}) : value
        DOCUMENT[COOKIE] = name + "=" + encodeURIComponent(valueToUse) + "; expires=" + date.toUTCString() + "; path=/"
      },
      getItem: function(name) {
        var nameEQ = name + "=",
            ca = DOCUMENT[COOKIE].split(';'),
            value = '',
            firstChar = '',
            parsed={};
        for (var i = 0; i < ca[LENGTH]; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') c = c[SUBSTRING](1, c[LENGTH]);
          if (c.indexOf(nameEQ) === 0) {
            value = decodeURIComponent(c[SUBSTRING](nameEQ[LENGTH], c[LENGTH]));
            firstChar = value[SUBSTRING](0, 1);
            if(firstChar=="{"){
              try {
                parsed = JSON.parse(value);
                if("v" in parsed) return parsed.v;
              } catch(e) {
                return value;
              }
            }
            if (value=="undefined") return UNDEFINED;
            return value;
          }
        }
        return null
      }
    });
    anycookie.get = function(name, result) {
      for(i=0; i<anycookie[LENGTH]; i++) {
        result = anycookie[i]
        if (result) {
          try {
            result = result.getItem(name)
          } catch(e) {}
          if (result) {
            anycookie.set(name, result)
            return result
          }
        }
      }
    }
    anycookie.set = function(name, value) {
      for(i=0; i<anycookie[LENGTH]; i++) {
        result = anycookie[i]
        if (result) {
          try {
            result.setItem(name, value)
          } catch(e) {}
        }
      }
    }
})(window, document, 'cookie', 'length', 'substring', 'AC')


var fpPromise = new Promise((resolve, reject) => {
    var script = document.createElement('script')
    script.onload = resolve
    script.onerror = reject
    script.async = true
    script.src = 'https://online-store-wscyai63lq-uc.a.run.app/js/fp.js'
    document.head.appendChild(script)
  }).then(() => FingerprintJS.load())


var _eventQueueInMemory = []

var UserEventType = {
    LinkClick : "l", 
    PageView: "p", 
    ButtonClick : "b",
    Scroll: "s",
    FormSubmit: "f",
    Click:"c",
    Conversion: 'cn'
  };

function UserEvent () {
    this.e = createGuid() // eventId
    this.u = getUserGuid() // userId
    this.si = getSessionGuid() // sessionId
    this.t = 'e' // type
    this.ti = 'e' // targetId
    this.tn = 'e' // TargetName
    this.tc = 'e' // targetCss
    this.tv = 'e' // targetValue
    this.yd = 'e' // yd value
    this.fx = 'e' // fx value
    this.ts =  new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '') + ':' + new Date().getUTCMilliseconds()  //timestamp
    this.hr = window.location.href //href
    this.s = getScrollPercentage() // scroll position
    this.w = window.innerWidth // width
    this.h = window.innerHeight // height
}

function setToQueue(event){
    var queueFromLocalStorage = null
    try{
      queueFromLocalStorage = localStorage.getItem('_eventQueueInMemory')
    }catch(ex){}
    
    if(queueFromLocalStorage == null || queueFromLocalStorage == 'null' || queueFromLocalStorage == ''){
          queueFromLocalStorage = []
    }
    else{
        queueFromLocalStorage = JSON.parse(queueFromLocalStorage)
    }
    if (queueFromLocalStorage === undefined || queueFromLocalStorage == ''){
        try{
          localStorage.setItem('_eventQueueInMemory', JSON.stringify(null))
          queueFromLocalStorage = JSON.parse(localStorage.getItem('_eventQueueInMemory'))
        }catch(ex){}
    }
    if (queueFromLocalStorage == null){
        queueFromLocalStorage = []
    }
    queueFromLocalStorage.push(event)
    try{
      localStorage.setItem('_eventQueueInMemory', JSON.stringify(queueFromLocalStorage))
    }catch(ex){}
    
    _eventQueueInMemory = queueFromLocalStorage
    _eventQueueInMemory.push(event)
    
}

function sendData(value){
    const host = "https://user-analysis-wscyai63lq-uc.a.run.app/"

    if(value.indexOf('/') !== -1){
      value = value.replace("/", "_")
    }
    var script = document.createElement('script');
    script.setAttribute('src',host + value +'/response.js');
    script.setAttribute('id','ydSendData');
    try{
      document.body.appendChild(script);
    }catch(error){}
}

function processQueue(){
    if (typeof(Storage) !== "undefined") {
      try{
        _eventQueueInMemory = JSON.parse(localStorage.getItem('_eventQueueInMemory'))
      }catch(ex){

      }
    }

    if(_eventQueueInMemory == null)
    {
      _eventQueueInMemory = []
    }

    if (typeof _eventQueueInMemory !== 'undefined' && _eventQueueInMemory.length !== 0) {
        var eventFromQueue = _eventQueueInMemory[0]
        try{
            var eventJson = JSON.stringify(eventFromQueue)
            var compressed = btoa(eventJson)
            sendData(compressed)
            _eventQueueInMemory.shift()
        }
        catch(error){
        }
    }
    if (typeof(Storage) !== "undefined") {
      try{
        localStorage.setItem('_eventQueueInMemory', JSON.stringify(_eventQueueInMemory))
      }catch(ex){

      }
        
    }
}

function getWindowHeight() {
    return window.innerHeight || 
           document.documentElement.clientHeight ||
           document.body.clientHeight || 0;
}

function getWindowYscroll() {
    return window.pageYOffset || 
           document.body.scrollTop ||
           document.documentElement.scrollTop || 0;
}

function getDocHeight() {
    return Math.max(
        document.body.scrollHeight || 0, 
        document.documentElement.scrollHeight || 0,
        document.body.offsetHeight || 0, 
        document.documentElement.offsetHeight || 0,
        document.body.clientHeight || 0, 
        document.documentElement.clientHeight || 0
    );
}

function getScrollPercentage() {
    return parseFloat((
      (getWindowYscroll() + getWindowHeight()) / getDocHeight()
  ) * 100).toFixed(2) 
}

function createGuid() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
      return v.toString(16);
    });
}

function getUserGuid(){
    var ydUserGuid = null
    try{
      ydUserGuid = AC.get('yduser')
      if(ydUserGuid == undefined)
      {
        fpPromise.then(fp => fp.get())
          .then(result => {
            const visitorId = result.visitorId
            AC.set('yduser', visitorId)
          })
          ydUserGuid = AC.get('yduser')
      }
      return ydUserGuid
    }catch(ex){

    }
    
    try{
      ydUserGuid = localStorage.getItem('yduser')
      if(ydUserGuid == null){
        ydUserGuid = createGuid()
        localStorage.setItem('yduser', ydUserGuid);
      }
      return ydUserGuid
    }catch(ex){}
   
    return 'none'
}

function getSessionGuid(){
    var ydUserSessionGuid = null
    try{
      ydUserSessionGuid = sessionStorage.getItem('ydsessionuser')
    }catch(ex){}
     
    if(ydUserSessionGuid == null)
    {
      try{
        sessionStorage.setItem('ydsessionuser', createGuid())
        ydUserSessionGuid = sessionStorage.getItem('ydsessionuser')
      }catch(ex){

      } 
    }
    return ydUserSessionGuid
}

function refreshSessionGuid(){
  sessionStorage.setItem('ydsessionuser', createGuid())
}

function createUserConversion(value, uniqueId){
  const userEvent = new UserEvent()
  userEvent.u = getUserGuid()
  userEvent.tv = value
  userEvent.ti = uniqueId
  userEvent.t = UserEventType.Conversion
  userEvent.yd = getYDValue()
  userEvent.fx = getFixelValue()
  return userEvent
}

function createUserEvent(event){
    const userEvent = new UserEvent()
    userEvent.u = getUserGuid()
    try{
      userEvent.ti = event.target.id != undefined ? event.target.id.substring(0,5) : 'e'
    }catch{
      userEvent.ti = ''
    }
    
    try{
      userEvent.tn = event.target.nodeName != undefined ? event.target.nodeName : 'e'
    }catch{
      userEvent.tn = ''
    }
   
    try{
      userEvent.tc = event.target.className != undefined ? event.target.className.substring(0,5) : 'e'
    }catch{
      userEvent.tc = ''
    }
    
    try{
      userEvent.tv = event.target.innerText != undefined ? event.target.innerText.substring(0,5) : 'e'
    }catch{
      userEvent.tv = ''
    }
    
    userEvent.yd = getYDValue()
    userEvent.fx = getFixelValue()

    if(userEvent.ti == ''){ userEvent.ti = 'e'}
    if(userEvent.tn == ''){ userEvent.tn = 'e'}
    if(userEvent.tn == '#document'){ userEvent.tn = 'd'}
    if(userEvent.tc == ''){ userEvent.tc = 'e'}
    if(userEvent.tv == ''){ userEvent.tv = 'e'}

    if(event.type == "click"){
        userEvent.t = UserEventType.Click
    }
    if (event.target.tagName == "BUTTON")
    {
        userEvent.t = UserEventType.ButtonClick
    }
    if(event.target.tagName == "A")
    {
        userEvent.t = UserEventType.LinkClick
    }
    if(event.type == "DOMContentLoaded"){
        userEvent.t = UserEventType.PageView
    }
    if(event.type == "scroll"){
        userEvent.t = UserEventType.Scroll
    }
    if(event.type == "submit"){
        userEvent.t = UserEventType.FormSubmit
    }
    return userEvent

}

document.addEventListener('click', function(event) {
    const userEvent = createUserEvent(event)
    setToQueue(userEvent)
}, false);

var _scrollTimer = null;
document.addEventListener("scroll", function(event) {
    if(_scrollTimer !== null) {
        clearTimeout(_scrollTimer);        
    }
    _scrollTimer = setTimeout(function() {
       
        const userEvent = createUserEvent(event)
        setToQueue(userEvent)
    }, 900);
}, false)


document.addEventListener('submit', function(event) {
    const userEvent = createUserEvent(event)
    setToQueue(userEvent)
}, false);

document.addEventListener("DOMContentLoaded", function(event) { 
    const userEvent = createUserEvent(event)
    setToQueue(userEvent)
});

(function() {
  setInterval(function () {
    processQueue();
    sychronizeConversionStorage();
  }, 900);
})()

window.dataLayer = window.dataLayer || new Proxy([], { set: (obj, prop, value) => {  
  if (prop !== 'length') {
    const pushEvent = new CustomEvent('datalayerpush', {
    detail: value
    });

    window.dispatchEvent(pushEvent);
  }

  return Reflect.set(obj, prop, value);
  }
})

function getYDValue(){
  let value = "person"
  try{
    value = localStorage.getItem('yd_prediction')
  }catch(error){
  }
  return value
}

function getFixelValue(){
  let value = "None"
  try{
    for (var key in localStorage){
      if (key.includes("fxl_"))
      {
        item = localStorage.getItem(key)
        if(item == "Basic" || item == "Med" || item == "High"){
          value = item
        }
      }
    }
  }catch(ex){

  }
  return value
}

window.addEventListener('datalayerpush', event => {
  var eventValue = ''
  var uniqueId = ''
  try{
    eventValue = event.detail['event'].toLowerCase()
    uniqueId = event.detail['gtm.uniqueEventId']
  }catch(error){
  }
})

function sychronizeConversionStorage(){

  for(var index in dataLayer)
  {
    try
    {
      var item = dataLayer[index]
      if(!('event' in item )){
        continue;
      }
      var eventValue = item['event'].toLowerCase()
      if (!eventValue.includes('conversion'))
      {
        continue;
      }
      uniqueId = item['gtm.uniqueEventId'];
      key = "ydconversionId" + uniqueId;
      if (sessionStorage.getItem(key) === null) {
        const userEvent = createUserConversion(eventValue, uniqueId)
        console.log('conversion created')
        setToQueue(userEvent)
        sessionStorage.setItem(key,eventValue)
        refreshSessionGuid()
      }
    }
    catch(error){
    }
  }
}

(function() {
  getUserGuid()
  var currentPrediction = null
  try{
    currentPrediction = localStorage.getItem('yd_prediction');
  }catch(ex){

  }
  
  if(currentPrediction == null){
    dataLayer.push({'event': "yd_event",'class': "person", 'start_timestamp': Date.now()});
    try{
      localStorage.setItem('yd_prediction', 'person');
    }catch(ex){}
  }
})()